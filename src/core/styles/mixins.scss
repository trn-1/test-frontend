@import '~@blueprintjs/core/src/components/html-table/_html-table';
@import '~@blueprintjs/core/lib/scss/variables';

@mixin item-list($direction, $margin) {
  display: flex;
  flex-direction: $direction;

  @if $direction == row {
    > *:not(:last-child) {
      margin-right: $margin;
    }
  } @else if $direction == column {
    > *:not(:last-child) {
      margin-bottom: $margin;
    }
  }
}

@mixin display-flex($direction, $align, $justify) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
}

@mixin dark-theme-only {
  :global(.bp3-dark) & {
    @content;
  }
}

@mixin popup-width-table-bordered-sticky-top {
  :global {
    .#{$ns}-dialog-body {
      flex-grow: 0;
      overflow-y: auto;
      box-shadow: $pt-elevation-shadow-1;
      border-radius: $pt-border-radius;

      @include dark-theme-only {
        box-shadow: $pt-dark-elevation-shadow-1;
      }
    }

    .#{$ns}-card {
      padding: 0;
      border-radius: 0;
    }

    .#{$ns}-dialog-footer {
      margin-top: auto;
    }
  }
}

@mixin table-bordered-sticky-top {
  thead {
    > tr {
      > th {
        &:first-child {
          box-shadow: inset 0 -1px 0 0 $table-border-color;

          @include dark-theme-only {
            box-shadow: inset 0 -1px 0 0 $dark-table-border-color;
          }
        }

        &:not(:first-child) {
          box-shadow: inset 1px -1px 0 0 $table-border-color !important;

          @include dark-theme-only {
            box-shadow: inset 1px -1px 0 0 $dark-table-border-color !important;
          }
        }
      }
    }
  }

  tbody {
    > tr:first-child {
      td {
        box-shadow: inset 1px 0 0 0 $table-border-color !important;

        @include dark-theme-only {
          box-shadow: inset 1px 0 0 0 $dark-table-border-color !important;
        }

        &:first-child {
          box-shadow: none !important;
        }
      }
    }
  }
}

@mixin sticky-cell {
  position: sticky;
  top: 0;
  background: $white;
  z-index: 1;

  @include dark-theme-only {
    background: $dark-gray4;
  }
}

@mixin widthMinMax($width, $min, $max) {
  width: $width;
  min-width: $min;
  max-width: $max;
}
